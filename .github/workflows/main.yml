name: Android Build and Release

on:
  push:
    branches: [main]
  pull_request:
    branches: [main]

jobs:
  validate-versions:
    if: github.event_name == 'pull_request'
    runs-on: ubuntu-latest
    permissions:
      contents: read

    steps:
      - name: Checkout code
        uses: actions/checkout@v2

      - name: Get package.json version
        id: package_version
        run: |
          VERSION=$(grep '"version"' package.json | awk -F: '{print $2}' | sed 's/[", ]//g')
          echo "version=$VERSION" >> $GITHUB_OUTPUT

      - name: Get Gradle versions
        id: gradle_versions
        run: |
          cd android/app
          VERSION_NAME=$(grep 'versionName' build.gradle | awk '{print $2}' | tr -d '"')
          VERSION_CODE=$(grep 'versionCode' build.gradle | awk '{print $2}')
          echo "version_name=$VERSION_NAME" >> $GITHUB_OUTPUT
          echo "version_code=$VERSION_CODE" >> $GITHUB_OUTPUT

      - name: Verify version match
        run: |
          if [ "${{ steps.package_version.outputs.version }}" != "${{ steps.gradle_versions.outputs.version_name }}" ]; then
            echo "❌ Version mismatch: package.json (${{ steps.package_version.outputs.version }}) vs build.gradle (${{ steps.gradle_versions.outputs.version_name }})"
            exit 1
          fi

      - name: Check existing releases
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: |
          RESPONSE=$(curl -s -H "Authorization: token $GITHUB_TOKEN" \
            "https://api.github.com/repos/${{ github.repository }}/releases?per_page=100")

          # Verificar si ya existe el tag de la versión
          EXISTING_TAG=$(echo "$RESPONSE" | jq -r --arg tag "v${{ steps.gradle_versions.outputs.version_name }}" '.[] | .tag_name | select(. == $tag)')
          if [ -n "$EXISTING_TAG" ]; then
            echo "❌ Version ${{ steps.gradle_versions.outputs.version_name }} already exists in releases"
            exit 1
          fi

          # Verificar si ya existe el versionCode en el cuerpo de la release
          EXISTING_CODE=$(echo "$RESPONSE" | jq -r --arg code "VersionCode: ${{ steps.gradle_versions.outputs.version_code }}" '.[] | select(.body | contains($code)) | .tag_name')
          if [ -n "$EXISTING_CODE" ]; then
            echo "❌ VersionCode ${{ steps.gradle_versions.outputs.version_code }} already exists in release: $EXISTING_CODE"
            exit 1
          fi

  build-and-release:
    if: github.event_name == 'push' && github.ref == 'refs/heads/main'
    runs-on: ubuntu-latest
    permissions:
      contents: write

    steps:
      - name: Checkout code
        uses: actions/checkout@v2

      - name: Setup JDK
        uses: actions/setup-java@v1
        with:
          java-version: '17'

      - name: Setup Node.js
        uses: actions/setup-node@v2
        with:
          node-version: '20'

      - name: Get Gradle versions
        id: gradle_versions
        run: |
          cd android/app
          VERSION_NAME=$(grep 'versionName' build.gradle | awk '{print $2}' | tr -d '"')
          VERSION_CODE=$(grep 'versionCode' build.gradle | awk '{print $2}')
          echo "version_name=$VERSION_NAME" >> $GITHUB_OUTPUT
          echo "version_code=$VERSION_CODE" >> $GITHUB_OUTPUT

      - name: Configure Gradle Properties
        run: |
          echo "MYAPP_UPLOAD_STORE_FILE=my-upload-key.keystore" >> android/gradle.properties
          echo "MYAPP_UPLOAD_KEY_ALIAS=${{ secrets.MYAPP_RELEASE_KEY_ALIAS }}" >> android/gradle.properties
          echo "MYAPP_UPLOAD_STORE_PASSWORD=${{ secrets.MYAPP_UPLOAD_KEY_PASSWORD }}" >> android/gradle.properties
          echo "MYAPP_UPLOAD_KEY_PASSWORD=${{ secrets.MYAPP_UPLOAD_STORE_PASSWORD }}" >> android/gradle.properties

      - name: Setup Android Keystore
        run: |
          echo "${{ secrets.ANDROID_KEYSTORE_BASE64 }}" | base64 -d > android/app/my-upload-key.keystore

      - name: Build APK and AAB
        run: |
          yarn install && yarn release && yarn generate-apk
          ls -lah android/app/build/outputs/apk/release/
          ls -lah android/app/build/outputs/bundle/release/

      - name: Organize Artifacts
        run: |
          mkdir -p artifacts
          VERSION="${{ steps.gradle_versions.outputs.version_name }}"
          mv android/app/build/outputs/apk/release/app-release.apk "artifacts/kuriamind-$VERSION.apk"
          mv android/app/build/outputs/bundle/release/app-release.aab "artifacts/kuriamind-aab-$VERSION.aab"
          ls -lah artifacts/

      - name: Publish to GitHub Release
        uses: softprops/action-gh-release@v2.2.1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          files: |
            artifacts/kuriamind-aab-${{ steps.gradle_versions.outputs.version_name }}.aab
            artifacts/kuriamind-${{ steps.gradle_versions.outputs.version_name }}.apk
          tag_name: v${{ steps.gradle_versions.outputs.version_name }}
          name: Kuriamind v${{ steps.gradle_versions.outputs.version_name }}
          body: |
            Version: ${{ steps.gradle_versions.outputs.version_name }}
            VersionCode: ${{ steps.gradle_versions.outputs.version_code }}
          draft: false

      - name: Upload AAB to Google Play as draft
        uses: r0adkll/upload-google-play@v1
        with:
          serviceAccountJsonPlainText: ${{ secrets.GOOGLE_PLAY_SERVICE_ACCOUNT_JSON }}
          packageName: com.kuriamind # 👈 Reemplaza esto con tu package name
          releaseFiles: artifacts/kuriamind-aab-${{ steps.gradle_versions.outputs.version_name }}.aab
          track: internal
          status: draft
